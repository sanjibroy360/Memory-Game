{"version":3,"sources":["component/Card.js","utils/data.js","App.js","index.js"],"names":["Card","cardInfo","handleFlip","index","noOfFlippedCards","Fragment","key","iconId","isFlipped","className","isMatched","icon","onClick","allCards","cardId","App","props","state","cards","flippedCards","setState","restartGame","has","cloneDeep","shuffeledCards","shuffleCards","i","length","randomIndex","Math","floor","random","score","this","card1","card2","blankFlippedCardContainer","setTimeout","map","card","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30ff7ade.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card({ cardInfo, handleFlip, index, noOfFlippedCards }) {\n  return (\n    <React.Fragment key={cardInfo.iconId}>\n      {cardInfo.isFlipped ? (\n        <div\n          className={\n            cardInfo.isFlipped &&\n            noOfFlippedCards === 2 &&\n            !cardInfo.isMatched ? \"visible card loose\" : \"visible card\"\n            \n          }\n        >\n          <i className={cardInfo.icon} />\n        </div>\n      ) : (\n        <div className=\"hidden card\" onClick={() => handleFlip(index)}></div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default Card;\n","export let allCards = [\n  {\n    icon: \"fas fa-paper-plane\",\n    isMatched: false,\n    isFlipped: false,\n    iconId: 0,\n    cardId: 1\n  },\n  {\n    icon: \"fas fa-paper-plane\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 0,\n    cardId: 2\n  },\n  {\n    icon: \"fas fa-bomb\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 1,\n    cardId: 3\n  },\n  {\n    icon: \"fas fa-bomb\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 1,\n    cardId: 4\n  },\n  {\n    icon: \"fas fa-biking\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 2,\n    cardId: 5\n  },\n  {\n    icon: \"fas fa-biking\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 2,\n    cardId: 6\n  },\n  {\n    icon: \"fas fa-gift\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 3,\n    cardId: 7\n  },\n  {\n    icon: \"fas fa-gift\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 3,\n    cardId: 8\n  },\n  {\n    icon: \"fas fa-leaf\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 4,\n    cardId: 9\n  },\n  {\n    icon: \"fas fa-leaf\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 4,\n    cardId: 10\n  },\n  {\n    icon: \"fas fa-bolt\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 5,\n    cardId: 11\n\n  },\n  {\n    icon: \"fas fa-bolt\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 5,\n    cardId: 12\n  },\n  {\n    icon: \"far fa-gem\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 6,\n    cardId: 13\n  },\n\n  {\n    icon: \"far fa-gem\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 6,\n    cardId: 14\n  },\n\n  {\n    icon: \"fas fa-anchor\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 7,\n    cardId: 15\n  },\n  {\n    icon: \"fas fa-anchor\",\n\n    isMatched: false,\n    isFlipped: false,\n    iconId: 7,\n    cardId: 16\n  },\n];\n","import React, { Component } from \"react\";\nimport Card from \"./component/Card\";\nimport { allCards } from \"./utils/data\";\nimport has from \"lodash\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flippedCards: [],\n      cards: [],\n      score: 0,\n    };\n  }\n\n  handleFlip = (index) => {\n    let { cards, flippedCards } = this.state;\n    cards[index].isFlipped = true;\n    this.setState({ cards, flippedCards: [...flippedCards, index] });\n  };\n\n  componentDidUpdate() {\n    let { flippedCards, cards, score } = this.state;\n    let card1 = cards[flippedCards[0]];\n    let card2 = cards[flippedCards[1]];\n    let blankFlippedCardContainer = [];\n    if (flippedCards.length === 2) {\n      if (card1.iconId === card2.iconId) {\n        cards[flippedCards[0]].isMatched = true;\n        cards[flippedCards[1]].isMatched = true;\n        score++;\n        return this.setState({\n          cards,\n          score,\n          flippedCards: blankFlippedCardContainer,\n        });\n      } else {\n        cards[flippedCards[0]].isFlipped = false;\n        cards[flippedCards[1]].isFlipped = false;\n        return setTimeout(\n          () =>\n            this.setState({\n              cards,\n              score,\n              flippedCards: blankFlippedCardContainer,\n            }),\n          750\n        );\n      }\n    }\n  }\n\n  componentDidMount() {\n    let cards = has.cloneDeep(allCards);\n    let shuffeledCards = this.shuffleCards(cards);\n    this.setState({ cards: shuffeledCards });\n  }\n\n  restartGame = () => {\n    let cards = has.cloneDeep(allCards);\n    let shuffeledCards = this.shuffleCards(cards);\n    this.setState({ cards: shuffeledCards, flippedCards: [] });\n  };\n\n  shuffleCards = (cards) => {\n    for (let i = 0; i < cards.length; i++) {\n      let randomIndex = Math.floor(Math.random() * i);\n      [cards[i], cards[randomIndex]] = [cards[randomIndex], cards[i]];\n    }\n    return cards;\n  };\n\n  render() {\n    let { cards, flippedCards, score } = this.state;\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Memory Game</h1>\n        <div className=\"score_board\">\n          <p>Score : {score > 1 ? score + \" points\" : score + \" point\"}</p>\n          <button className=\"restart_btn\" onClick={this.restartGame}>\n            <i className=\"fas fa-redo-alt\" /> Restart\n          </button>\n        </div>\n        <ul className=\"card_container\">\n          {cards.map((card, index) => {\n            return (\n              <li className=\"card\" key={\"card\"+card.cardId}>\n                <Card\n                  cardInfo={card}\n                  handleFlip={this.handleFlip}\n                  index={index}\n                  noOfFlippedCards={flippedCards.length}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from \"./App\";\nimport \"./assets/stylesheets/index.scss\";\n\nReactDOM.render(<React.Fragment>\n    <App />\n</React.Fragment>, document.getElementById('root'));"],"sourceRoot":""}